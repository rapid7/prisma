(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("prisma", [], factory);
	else if(typeof exports === 'object')
		exports["prisma"] = factory();
	else
		root["prisma"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar MATH_ROUND = Math.round;\nvar MATH_MAX = Math.max;\nvar MATH_MIN = Math.min;\nvar OBJECT_FREEZE = Object.freeze;\n\nvar DEFAULT_HEX_CODE_VALUE = '000000';\nvar L_THRESHOLD = Math.sqrt(1.05 * 0.05) - 0.05;\nvar BRIGHTNESS_THRESHOLD = 130;\n\n/**\n * convenience function to round fraction to two digits\n *\n * @param {number} number\n * @returns {number}\n */\nvar roundToTwoDigits = function roundToTwoDigits(number) {\n  return MATH_ROUND(number * 100) / 100;\n};\n\n/**\n * based on array of hsl / hsla values,\n * return built string of comma-separated hsl CSS values\n *\n * @param {Array} hsla\n * @returns {string}\n */\nvar getHslaString = function getHslaString(hsla) {\n  return hsla.reduce(function (hslaValueString, hslaPart, index) {\n    var isHue = index === 0;\n    var isAlpha = index === 3;\n\n    if (isHue) {\n      return hslaValueString + hslaPart;\n    }\n\n    if (isAlpha) {\n      return hslaValueString + ', ' + hslaPart;\n    }\n\n    return hslaValueString + ', ' + MATH_ROUND(hslaPart * 100) + '%';\n  }, '');\n};\n\n/**\n * determine whether the foreground color for the text\n * used with the color as a background color should\n * be dark (preferrably black), based on general brightness guideliness\n *\n * @param {Array<number>} rgb\n * @param {number} brightnessThreshold\n * @returns {boolean}\n */\nvar shouldForegroundBeDark = function shouldForegroundBeDark(rgb, brightnessThreshold) {\n  var brightnessComparator = brightnessThreshold;\n\n  if (brightnessThreshold < 0) {\n    brightnessComparator = 0;\n  } else if (brightnessThreshold > 255) {\n    brightnessComparator = 255;\n  }\n\n  var brightnessValue = rgb.reduce(function (currentBrightnessValue, colorPart, colorPartIndex) {\n    switch (colorPartIndex) {\n      case 0:\n        return currentBrightnessValue + colorPart * colorPart * 0.241;\n\n      case 1:\n        return currentBrightnessValue + colorPart * colorPart * 0.691;\n\n      case 2:\n        return currentBrightnessValue + colorPart * colorPart * 0.068;\n    }\n  }, 0);\n\n  return Math.sqrt(brightnessValue) >= brightnessComparator;\n};\n\n/**\n * determine whether the foreground color for the text\n * used with the color as a background color should\n * be dark (preferrably black), based on relative\n * luminance definitions in the spec:\n *\n * https://www.w3.org/TR/WCAG20/#relativeluminancedef\n *\n * @param {Array} rgb\n * @returns {boolean}\n */\nvar shouldForegroundBeDarkW3C = function shouldForegroundBeDarkW3C(rgb) {\n  var L = rgb.reduce(function (currentL, color, colorIndex) {\n    var updatedColor = color / 255;\n\n    if (updatedColor <= 0.03928) {\n      updatedColor /= 12.92;\n    } else {\n      updatedColor = Math.pow((updatedColor + 0.055) / 1.055, 2.4);\n    }\n\n    switch (colorIndex) {\n      case 0:\n        return currentL + 0.2126 * updatedColor;\n\n      case 1:\n        return currentL + 0.7152 * updatedColor;\n\n      case 2:\n        return currentL + 0.0722 * updatedColor;\n    }\n  }, 0);\n\n  return L > L_THRESHOLD;\n};\n\n/**\n * converts string to integer hash value\n *\n * @param {string} string\n * @returns {number}\n */\nvar hashCode = function hashCode(string) {\n  var hash = 0,\n      index = string.length;\n\n  for (; index--;) {\n    hash = string.charCodeAt(index) + ((hash << 5) - hash);\n  }\n\n  return hash;\n};\n\n/**\n * convert integer value to hex code\n *\n * @param {number} integer\n * @param {string} defaultHex\n * @returns {string}\n */\nvar integerToHex = function integerToHex(integer, defaultHex) {\n  var hex = (integer >> 24 & 0xFF).toString(16) + (integer >> 16 & 0XFF).toString(16) + (integer >> 8 & 0xFF).toString(16) + (integer & 0xFF).toString(16);\n\n  if (!hex) {\n    return defaultHex;\n  }\n\n  if (hex.length < 6) {\n    var hexCharArray = [];\n\n    for (var index = 0; index < 6; index++) {\n      hexCharArray.push(hex[index] || '0');\n    }\n\n    return hexCharArray.join('');\n  }\n\n  return hex.substring(0, 6);\n};\n\n/**\n * based on string passed, return hex code generated\n * from hashed value\n *\n * @param {string} string\n * @param {string} defaultHex\n * @returns {string}\n */\nvar stringToHex = function stringToHex(string, defaultHex) {\n  if (!string) {\n    return defaultHex;\n  }\n\n  var hash = hashCode(string);\n\n  return integerToHex(hash, defaultHex).substring(0, 6);\n};\n\n/**\n * build RGB color from hashed string value\n *\n * @param {string} hex\n * @returns {Array<number>}\n */\nvar stringToRgb = function stringToRgb(hex) {\n  var red = parseInt(hex.substring(0, 2), 16);\n  var green = parseInt(hex.substring(2, 4), 16);\n  var blue = parseInt(hex.substring(4, 6), 16);\n\n  return [red, green, blue];\n};\n\n/**\n * based on rgb array, return hsl array value\n *\n * @param {number} red\n * @param {number} green\n * @param {number} blue\n * @returns {Array}\n */\nvar rgbToHsl = function rgbToHsl(_ref) {\n  var _ref2 = _slicedToArray(_ref, 3);\n\n  var red = _ref2[0];\n  var green = _ref2[1];\n  var blue = _ref2[2];\n\n  var fractionalRed = red / 255;\n  var fractionalGreen = green / 255;\n  var fractionalBlue = blue / 255;\n\n  var max = MATH_MAX(fractionalRed, fractionalGreen, fractionalBlue);\n  var min = MATH_MIN(fractionalRed, fractionalGreen, fractionalBlue);\n\n  var luminance = (max + min) / 2;\n\n  if (max === min) {\n    return [0, 0, luminance];\n  }\n\n  var delta = max - min;\n  var saturation = luminance > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  var hue = void 0;\n\n  switch (max) {\n    case fractionalRed:\n      hue = (fractionalGreen - fractionalBlue) / delta + (fractionalGreen < fractionalBlue ? 6 : 0);\n      break;\n\n    case fractionalGreen:\n      hue = (fractionalBlue - fractionalRed) / delta + 2;\n      break;\n\n    case fractionalBlue:\n      hue = (fractionalRed - fractionalGreen) / delta + 4;\n      break;\n  }\n\n  hue *= 60;\n\n  return [MATH_ROUND(MATH_MAX(0, hue)), roundToTwoDigits(saturation), roundToTwoDigits(luminance)];\n};\n\n/**\n * return object with a variety of color options for the developer\n *\n * @param {string} value\n * @param {object} options={}\n * @param {string} [options.defaultHex=DEFAULT_HEX_CODE_VALUE]\n * @param {number} [options.gammaThreshold=BRIGHTNESS_THRESHOLD]\n * @param {number} [options.opacity=1]\n * @returns {object}\n */\nvar createPrisma = function createPrisma(value) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n  var _options$defaultHex = options.defaultHex;\n  var defaultHex = _options$defaultHex === undefined ? DEFAULT_HEX_CODE_VALUE : _options$defaultHex;\n  var _options$brightnessTh = options.brightnessThreshold;\n  var brightnessThreshold = _options$brightnessTh === undefined ? BRIGHTNESS_THRESHOLD : _options$brightnessTh;\n  var _options$opacity = options.opacity;\n  var opacity = _options$opacity === undefined ? 1 : _options$opacity;\n\n\n  if (defaultHex.length !== 6) {\n    throw new SyntaxError('Your defaultHex value is invalid; it needs to be the full six-character hexadecimal color code without the leading #.');\n  }\n\n  if (opacity > 1 || opacity < 0) {\n    throw new SyntaxError('Your opacity value is invalid; it needs to be a decimal value between 0 and 1.');\n  }\n\n  if (brightnessThreshold < 0 || brightnessThreshold > 255) {\n    throw new SyntaxError('Your brightnessThreshold is invalid; it needs to be a numeric value between 0 and 255.');\n  }\n\n  var stringValue = '' + value;\n  var hexString = stringToHex(stringValue, defaultHex);\n\n  var rgbArray = stringToRgb(hexString);\n  var rgbaArray = rgbArray.concat([opacity]);\n  var hslArray = rgbToHsl(rgbArray);\n  var hslaArray = hslArray.concat([opacity]);\n\n  var hex = '#' + hexString;\n  var rgb = 'rgb(' + rgbArray.join(', ') + ')';\n  var rgba = 'rgba(' + rgbaArray.join(', ') + ')';\n  var hsl = 'hsl(' + getHslaString(hslArray) + ')';\n  var hsla = 'hsla(' + getHslaString(hslaArray) + ')';\n\n  var shouldTextBeDark = shouldForegroundBeDark(rgbArray, brightnessThreshold);\n  var shouldTextBeDarkW3C = shouldForegroundBeDarkW3C(rgbArray);\n\n  var prisma = Object.create(null);\n\n  prisma.hex = hex;\n\n  prisma.rgb = rgb;\n  prisma.rgbArray = OBJECT_FREEZE(rgbArray);\n\n  prisma.rgba = rgba;\n  prisma.rgbaArray = OBJECT_FREEZE(rgbaArray);\n\n  prisma.hsl = hsl;\n  prisma.hslArray = OBJECT_FREEZE(hslArray);\n\n  prisma.hsla = hsla;\n  prisma.hslaArray = OBJECT_FREEZE(hslaArray);\n\n  prisma.shouldTextBeDark = shouldTextBeDark;\n  prisma.shouldTextBeDarkW3C = shouldTextBeDarkW3C;\n\n  return OBJECT_FREEZE(prisma);\n};\n\nexports.default = createPrisma;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ])
});
;